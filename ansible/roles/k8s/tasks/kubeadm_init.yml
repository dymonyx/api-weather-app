---
- name: Initialize Kubernetes cluster using kubeadm
  ansible.builtin.command:
    cmd: kubeadm init --pod-network-cidr=10.244.0.0/16 --service-cidr=10.96.0.0/12 --apiserver-advertise-address=192.168.56.2
    creates: /etc/kubernetes/admin.conf # вынести в варс
  register: kubeadm_init_result
  when: inventory_hostname == "node_1"

- name: Save kubeadm init stdout to a log file
  ansible.builtin.copy:
    content: "{{ kubeadm_init_result.stdout }}"
    dest: /root/kubeadm-init.log
    mode: '0644'
  when: "'master' in group_names"

- name: Ensure containerRuntimeEndpoint is set for Kubelet
  ansible.builtin.lineinfile:
    path: /var/lib/kubelet/config.yaml
    regex: '^containerRuntimeEndpoint:.*'
    line: 'containerRuntimeEndpoint: unix:///var/run/crio/crio.sock'
    state: present
  become: true
  notify: Restart Kubelet service
  when: "'master' in group_names"

- name: Create kube config directory
  ansible.builtin.file:
    path: "/root/.kube"
    mode: "0700"
    state: directory
  when: "'master' in group_names"

- name: Copy admin kubeconfig to root directory
  ansible.builtin.copy:
    src: "/etc/kubernetes/admin.conf"
    dest: "/root/.kube/config"
    remote_src: true
    mode: "0600"
    backup: true
  when: "'master' in group_names"

# - name: Extract join command
#   ansible.builtin.command: kubeadm token create --print-join-command # а если expired и надо присоединить ноду позже инита кластера?
#   register: kubeadm_join_cmd
#   when: "'master' in group_names"

# - name: Join workers to cluster
#   ansible.builtin.command: "{{ kubeadm_join_cmd.stdout }}"
#   when: "'worker' in group_names"


- name: Get kubeadm token list
  ansible.builtin.command: kubeadm token list
  register: token_list
  failed_when: false
  changed_when: false
  when: "'master' in group_names"

- name: Check non expired tokens
  ansible.builtin.set_fact:
    valid_tokens: >-
      {{ token_list.stdout_lines[1:] |
         select("search", "authentication,signing") |
         select("search", "system:bootstrappers:kubeadm:default-node-token") |
         map('split') |
         map('first') |
         list }}
  when: "'master' in group_names"

- name: Set flag of existing non expired token
  ansible.builtin.set_fact:
    has_valid_token: "{{ valid_tokens | length > 0 }}"
  when: "'master' in group_names"

# - name: Show valid_tokens
#   ansible.builtin.debug:
#     var: valid_tokens

- name: Set existing_token
  ansible.builtin.set_fact:
    existing_token: "{{ valid_tokens[0] }}"
  when:
    - "'master' in group_names"
    - has_valid_token

# - name: Show existing_token
#   ansible.builtin.debug:
#     var: existing_token

- name: Get hash of CA
  ansible.builtin.shell: |
    set -o pipefail
    openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt \
    | openssl rsa -pubin -outform der 2>/dev/null \
    | openssl dgst -sha256 -hex \
    | sed 's/^.* //'
  args:
    executable: /bin/bash
  register: ca_cert_hash
  changed_when: false
  when:
    - "'master' in group_names"
    - has_valid_token

- name: Set master IP on master
  ansible.builtin.set_fact:
    master_ip: "{{ ansible_enp0s8.ipv4.address }}"
  when:
    - "'master' in group_names"
    - has_valid_token

- name: Create kubeadm join command
  ansible.builtin.set_fact:
    kubeadm_join_cmd: >-
      kubeadm join {{ master_ip }}:6443
      --token {{ existing_token }}
      --discovery-token-ca-cert-hash sha256:{{ ca_cert_hash.stdout }}
  when:
    - "'master' in group_names"
    - has_valid_token

- name: Create new token and kubeadm join command
  ansible.builtin.command: kubeadm token create --print-join-command
  register: kubeadm_join_cmd_output
  when:
    - "'master' in group_names"
    - not has_valid_token
  changed_when: true

- name: Structure join command into one variable
  ansible.builtin.set_fact:
    kubeadm_join_cmd_final: >-
      {{ kubeadm_join_cmd
          if has_valid_token
          else kubeadm_join_cmd_output.stdout }}
  when:
    - "'master' in group_names"

- name: Show kubeadm join command
  ansible.builtin.debug:
    var: kubeadm_join_cmd_final
  when:
    - "'master' in group_names"

- name: Share kubeadm_join_cmd_final from master to all nodes
  ansible.builtin.set_fact:
    kubeadm_join_cmd_final: "{{ hostvars[groups['master'][0]]['kubeadm_join_cmd_final'] }}"
  when: "'worker' in group_names"

- name: Join workers to cluster # вынести все это дело в отдельный плейбук или роль хз потому что хендлер срабатывает только после всех задач
  ansible.builtin.command: "{{ kubeadm_join_cmd_final }}"
  when:
    - "'worker' in group_names"
  args:
    creates: /etc/kubernetes/kubelet.conf

- name: Deploy Tigera Operator for Calico
  ansible.builtin.command: >
    kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.2/manifests/tigera-operator.yaml
  register: tigera_create
  failed_when: tigera_create.rc != 0 and ('AlreadyExists' not in tigera_create.stderr)
  changed_when: "'created' in tigera_create.stdout"
  when: "'master' in group_names"

- name: Ensure existance custom-resources.yaml
  ansible.builtin.stat:
    path: /root/custom-resources.yaml # в варс
  register: custom_resources
  when: "'master' in group_names"

- name: Get custom-resources.yaml
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/projectcalico/calico/v3.25.2/manifests/custom-resources.yaml
    dest: /root/custom-resources.yaml
    mode: '0644'
    force: false
  when:
    - "'master' in group_names"
    - not custom_resources.stat.exists

- name: Check if CIDR is already set to 10.244.0.0/16
  ansible.builtin.command: 'grep "cidr: 10.244.0.0/16" /root/custom-resources.yaml'
  register: cidr_check
  failed_when: false
  changed_when: false
  when: "'master' in group_names"

- name: Change custom-resources.yaml
  ansible.builtin.lineinfile:
    path: /root/custom-resources.yaml
    regexp: '^\s*cidr:.*'
    line: '      cidr: 10.244.0.0/16'
    state: present
  become: true
  when:
    - "'master' in group_names"
    - cidr_check.rc != 0

- name: Deploy custom-resources.yaml
  ansible.builtin.command: >
    kubectl create -f /root/custom-resources.yaml
  register: custom_resources_create
  failed_when: custom_resources_create.rc != 0 and ('AlreadyExists' not in custom_resources_create.stderr)
  changed_when: "'created' in custom_resources_create.stdout"
  when: "'master' in group_names"

- name: Ensure KUBELET_EXTRA_ARGS is set with correct node IP
  lineinfile:
    path: /etc/default/kubelet
    regexp: '^KUBELET_EXTRA_ARGS='
    line: 'KUBELET_EXTRA_ARGS=--node-ip={{ ansible_enp0s8.ipv4.address }}'
    create: yes
    backup: yes
  notify: Restart Kubelet service

- name: Ensure crio.runtime "NET_RAW" is set
  ansible.builtin.blockinfile:
    path: /etc/crio/crio.conf.d/10-crio.conf
    marker: "# {mark} ANSIBLE MANAGED BLOCK - CRIO.RUNTIME"
    block: |
      [crio.runtime]
      default_runtime = "crun"
      default_capabilities = [
         "CHOWN",
         "DAC_OVERRIDE",
         "FOWNER",
         "FSETID",
         "KILL",
         "SETGID",
         "SETUID",
         "SETPCAP",
         "NET_BIND_SERVICE",
         "NET_RAW"
      ]
  notify: Restart CRI-O service
